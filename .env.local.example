# Database
DATABASE_URL="postgresql://username:password@localhost:5432/database_name"

# For development with local PostgreSQL:
# DATABASE_URL="postgresql://postgres:password@localhost:5432/ai_foundry"

# For production (example with hosted PostgreSQL):
# DATABASE_URL="postgresql://username:password@host:5432/database_name?sslmode=require"

# AI Providers (set as needed)
## Agent provider selection for app/api/ai/agent
# Options: google | openai-compatible | openrouter
AI_AGENT_PROVIDER="google"

# Optional: model id for the agent route
# - For google: e.g. gemini-2.5-flash, gemini-1.5-pro
# - For openai-compatible: e.g. gpt-4o-mini, meta-llama/Llama-3-70b-chat-hf
# - For openrouter: e.g. openai/gpt-4o-mini, anthropic/claude-3.5-sonnet, meta-llama/llama-3.1-70b-instruct
AI_AGENT_MODEL="gemini-2.5-flash"

# Google Gemini (used by /api/ai/chat and as default in /api/ai/agent when AI_AGENT_PROVIDER=google)
# Get a key: https://aistudio.google.com/app/apikey
GOOGLE_GENERATIVE_AI_API_KEY="your-google-api-key"

# OpenAI-compatible provider settings (used when AI_AGENT_PROVIDER=openai-compatible)
# Set the base URL of your provider (required for most providers)
# Examples:
# - LM Studio:           http://localhost:1234/v1
# - NVIDIA NIM:          https://integrate.api.nvidia.com/v1
# - Groq (OpenAI path):  https://api.groq.com/openai/v1
# - DeepSeek:            https://api.deepseek.com/v1
OPENAI_COMPATIBLE_BASE_URL="https://api.provider.com/v1"

# API key if your provider requires it (optional for some local providers like LM Studio)
OPENAI_COMPATIBLE_API_KEY="your-provider-api-key"

# Optional: a short provider name used for providerOptions/metadata grouping
OPENAI_COMPATIBLE_PROVIDER_NAME="custom"

# OpenRouter provider (used when AI_AGENT_PROVIDER=openrouter)
# Get a key: https://openrouter.ai/keys
OPENROUTER_API_KEY="your-openrouter-api-key"

# Anthropic Claude (used by /api/claude-code)
# Get a key: https://console.anthropic.com/
ANTHROPIC_API_KEY="your-anthropic-api-key"

# Optional: HTTP/HTTPS proxy for outgoing requests (used via undici)
# Examples:
# HTTPS_PROXY="http://user:pass@proxy.example.com:3128"
# HTTP_PROXY="http://user:pass@proxy.example.com:3128"
# ALL_PROXY="socks5://127.0.0.1:1080"
# Custom var the app also checks (higher priority):
# UNDICI_PROXY="http://proxy.example.com:3128"
