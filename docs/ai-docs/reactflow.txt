Learn
Quick Start
Quick Start
This page will take you from zero to a working React Flow app in a few minutes. If you just want to have a look around and get an impression of React Flow, check out our interactive no-code Playground .

Installation
First, spin up a new React project however you like ‚Äî we recommend using Vite 


pnpm create vite my-react-flow-app --template react
Next cd into your new project folder and add @xyflow/react as a dependency


pnpm add @xyflow/react
Lastly, spin up the dev server and you‚Äôre good to go!

Usage
We will render the <ReactFlow /> component from the @xyflow/react package. That and defining a handful of node objects, edge objects and event handlers are all we need to get something going! Get rid of everything inside App.jsx and add the following:


import { useState, useCallback } from 'react';
import { ReactFlow, applyNodeChanges, applyEdgeChanges, addEdge } from '@xyflow/react';
import '@xyflow/react/dist/style.css';
 
const initialNodes = [
  { id: 'n1', position: { x: 0, y: 0 }, data: { label: 'Node 1' } },
  { id: 'n2', position: { x: 0, y: 100 }, data: { label: 'Node 2' } },
];
const initialEdges = [{ id: 'n1-n2', source: 'n1', target: 'n2' }];
 
export default function App() {
  const [nodes, setNodes] = useState(initialNodes);
  const [edges, setEdges] = useState(initialEdges);
 
  const onNodesChange = useCallback(
    (changes) => setNodes((nodesSnapshot) => applyNodeChanges(changes, nodesSnapshot)),
    [],
  );
  const onEdgesChange = useCallback(
    (changes) => setEdges((edgesSnapshot) => applyEdgeChanges(changes, edgesSnapshot)),
    [],
  );
  const onConnect = useCallback(
    (params) => setEdges((edgesSnapshot) => addEdge(params, edgesSnapshot)),
    [],
  );
 
  return (
    <div style={{ width: '100vw', height: '100vh' }}>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        fitView
      />
    </div>
  );
}
There are two things to pay attention to here:

üé® You must import the css stylesheet for React Flow to work.
üìê The <ReactFlow /> component must have a parent element with a width and height.


Overview
At its core, React Flow is about creating interactive flowgraphs ‚Äî a collection of nodes connected by edges. To help you understand the terminology we use throughout the documentation, let‚Äôs take a look at the example flow below.






Nodes
React Flow has a few default node types out of the box, but customization is where the magic of React Flow truly happens. You can design your nodes to work exactly the way you need them to‚Äîwhether that‚Äôs embedding interactive form elements, displaying dynamic data visualizations, or even incorporating multiple connection handles. React Flow lays the foundation, and your imagination does the rest.

We have a guide on creating your own Custom Nodes and you can find all the options for customizing your nodes in the Node reference.

Handles
A handle (also known as a ‚Äúport‚Äù in other libraries) is the attachment point where an edge connects to a node. By default, they appear as grey circles on the top, bottom, left, or right sides of a node. But they are just div elements, and can be positioned and styled any way you‚Äôd like. When creating a custom node, you can include as many handles as needed. For more information, refer to the Handle page.

Edges
Edges connect nodes. Every edge needs a target and a source node. React Flow comes with four built-in edge types: default (bezier), smoothstep, step, and straight. An edge is a SVG path that can be styled with CSS and is completely customizable. If you are using multiple handles, you can reference them individually to create multiple connections for a node.

Like custom nodes, you can also customize edges. Things that people do with custom edges include:

Adding buttons to remove edges
Custom routing behavior
Complex styling or interactions that cannot be solved with just one SVG path
For more information, refer to the Edges page.

Connection line
React Flow has built-in functionality that allows you to click and drag from one handle to another to create a new edge. While dragging, the placeholder edge is referred to as a connection line. The connection line comes with the same four built-in types as edges and is customizable. You can find the props for configuring the connection line in the connection props reference.

Viewport
All of React Flow is contained within the viewport. Each node has an x- and y-coordinate, which indicates its position within the viewport. The viewport has x, y, and zoom values. When you drag the pane, you change the x and y coordinates. When you zoom in or out, you alter the zoom level.

Building a Flow
In the following pages we will introduce you to the core concepts of React Flow and explain how to create a basic interactive flow. A flow consists of nodes, edges and the viewport.

To follow along with this guide you will need to have a React project set up and install the @xyflow/react package:


pnpm add @xyflow/react
Creating the flow
Let‚Äôs start by creating an empty flow with viewport <Controls /> and a dotted <Background />.

Add imports
First, we need to import some basic components from the @xyflow/react package and the css stylesheet, which is required for React Flow to work:


import { ReactFlow, Background, Controls } from '@xyflow/react';
import '@xyflow/react/dist/style.css';
Render ReactFlow
Now we create a React component, that renders our flow. The width and height on the parent container are required because React Flow uses these dimensions.


export default function App() {
  return (
    <div style={{ height: '100%', width: '100%' }}>
      <ReactFlow>
        <Background />
        <Controls />
      </ReactFlow>
    </div>
  );
}
Empty flow
That‚Äôs it! You have created your first empty flow üéâ






Adding nodes
Now that the flow is set up, it‚Äôs time to add nodes ‚Äî each node represents an element in your diagram with a specific position and content.

Create node objects
Outside of your React component, create an array of node objects. Each node object needs a unique id and a position. Let‚Äôs also add a label to them:


const initialNodes = [
  {
    id: 'n1',
    position: { x: 0, y: 0 },
    data: { label: 'Node 1' },
    type: 'input',
  },
  {
    id: 'n2',
    position: { x: 100, y: 100 },
    data: { label: 'Node 2' },
  },
];
Add nodes to the flow
Now we can pass our initialNodes array to the <ReactFlow /> component using the nodes prop:


<ReactFlow nodes={initialNodes}>
  <Background />
  <Controls />
</ReactFlow>
Flow with nodes
This gives us a flow with two labeled nodes üéâ






We have several built-in nodes that you can explore in the node reference. However, once you start building your own application, you will want to use custom nodes.

Adding edges
Now that we have two nodes, let‚Äôs connect them with an edge.

Create an edge
To create an edge, we define an array of edge objects. Each edge object needs to have an id, a source (where the edge begins), and a target (where it ends). In this example, we use the id values of the two nodes we created so far (n1 and n2) to define the edge:


const initialEdges = [
  {
    id: 'n1-n2',
    source: 'n1',
    target: 'n2',
  },
];
This edge connects the node with id: 'n1' (the source) to the node with id: 'n2' (the target).






Label the edge
Let‚Äôs give this edge two properties that are built into React Flow, a label and a type: "step".


const initialEdges = [
  {
    id: 'n1-n2',
    source: 'n1',
    target: 'n2',
    type: 'step',
    label: 'connects with',
  },
];
Basic flow
Now we have completed a basic flow with nodes and edges! üéâ






Full code example üèÅ





You took your first steps in React Flow! You might have realized that you can‚Äôt drag or otherwise interact with nodes. On the next page you‚Äôll learn how to make the flow interactive.

Adding Interactivity
Now that we‚Äôve built our first flow, let‚Äôs add interactivity so you can select, drag, and remove nodes and edges.

Handling change events
By default React Flow doesn‚Äôt manage any internal state updates besides handling the viewport. As you would with an HTML <input /> element you need to pass event handlers to React Flow in order to apply triggered changes to your nodes and edges.

Add imports
To manage changes, we‚Äôll be using useState with two helper functions from React Flow: applyNodeChanges and applyEdgeChanges. So let‚Äôs import these functions:


import { useState, useCallback } from 'react';
import { ReactFlow, applyEdgeChanges, applyNodeChanges } from '@xyflow/react';
Define nodes and edges
We need to define initial nodes and edges. These will be the starting point for our flow.


const initialNodes = [
  {
    id: 'n1',
    position: { x: 0, y: 0 },
    data: { label: 'Node 1' },
    type: 'input',
  },
  {
    id: 'n2',
    position: { x: 100, y: 100 },
    data: { label: 'Node 2' },
  },
];
 
const initialEdges = [
  {
    id: 'n1-n2',
    source: 'n1',
    target: 'n2',
  },
];
Initialize state
In our component, we‚Äôll call the useState hook to manage the state of our nodes and edges:


export default function App() {
  const [nodes, setNodes] = useState(initialNodes);
  const [edges, setEdges] = useState(initialEdges);
 
  return (
    <div style={{ height: '100%', width: '100%' }}>
      <ReactFlow>
        <Background />
        <Controls />
      </ReactFlow>
    </div>
  );
}
Add event handlers
We need to create two event handlers: onNodesChange and onEdgesChange. They will be used to update the state of our nodes and edges when changes occur, such as dragging or deleting an element. Go ahead and add these handlers to your component:


const onNodesChange = useCallback(
  (changes) => setNodes((nodesSnapshot) => applyNodeChanges(changes, nodesSnapshot)),
  [],
);
const onEdgesChange = useCallback(
  (changes) => setEdges((edgesSnapshot) => applyEdgeChanges(changes, edgesSnapshot)),
  [],
);
Pass them to ReactFlow
Now we can pass our nodes, edges, and event handlers to the <ReactFlow /> component:


<ReactFlow
  nodes={nodes}
  edges={edges}
  onNodesChange={onNodesChange}
  onEdgesChange={onEdgesChange}
  fitView
>
  <Background />
  <Controls />
</ReactFlow>
Interactive flow
And that‚Äôs it! You now have a basic interactive flow üéâ

When you drag or select a node, the onNodesChange handler is triggered. The applyNodeChanges function then uses these change events to update the current state of your nodes. Here‚Äôs how it all comes together. Try clicking and dragging a node to move it around and watch the UI update in real time.






Handling connections
One last piece is missing: connecting nodes interactively. For this, we need to implement an onConnect handler.

Create onConnect handler
The onConnect handler is called whenever a new connection is made between two nodes. We can use the addEdge utility function to create a new edge and update the edge Array.


const onConnect = useCallback(
  (params) => setEdges((edgesSnapshot) => addEdge(params, edgesSnapshot)),
  [],
);
Pass it to ReactFlow
Now we can pass the onConnect handler to the <ReactFlow /> component:


<ReactFlow
  nodes={nodes}
  edges={edges}
  onNodesChange={onNodesChange}
  onEdgesChange={onEdgesChange}
  onConnect={onConnect}
  fitView
>
  <Background />
  <Controls />
</ReactFlow>
Connectable flow
Try to connect the two nodes by dragging from on handle to another one. The onConnect handler will be triggered, and the new edge will be added to the flow. ü•≥






Full code example üèÅ





What is happening here? Whenever React Flow triggers a change (node init, node drag, edge select, etc.), the onNodesChange handler gets called. We export an applyNodeChanges handler so that you don‚Äôt need to handle the changes by yourself. The applyNodeChanges handler returns an updated array of nodes that is your new nodes array. You now have an interactive flow with the following capabilities:

selectable nodes and edges
draggable nodes
connectable nodes by dragging from one node handle to another
multi-selection area by pressing shift ‚Äî the default selectionKeyCode
multi-selection by pressing cmd ‚Äî the default multiSelectionKeyCode
removing selected elements by pressing backspace ‚Äî the default deleteKeyCode
If you want to jump straight into creating your own application, we recommend checking out the Customization section. Otherwise keep reading to learn more about React Flows capabilities.

Panning and Zooming
The default pan and zoom behavior of React Flow is inspired by slippy maps . You pan by dragging your pointer and zoom by scrolling. You can customize this behavior easily with the interaction and keyboard props on the <ReactFlow /> component.

Viewport configurations
Here we will list and explain some configurations that other tools use.

Default viewport controls
As mentioned above, the ReactFlow default controls are as follows:

pan: pointer drag
zoom: pinch or scroll
select: shift + pointer drag





Design tool viewport controls
If you prefer figma/sketch/design tool controls you can set panOnScroll and selectionOnDrag to true and panOnDrag to false:

pan: scroll, middle / right mouse drag, space + pointer drag
zoom: pinch or cmd + scroll
select: pointer drag





In this example we also set selectionMode="partial" to be able to add nodes to a selection that are only partially selected.

React Flow comes with several built-in components that can be passed as children to the <ReactFlow /> component.

MiniMap
The MiniMap provides a bird‚Äôs-eye view of your flowgraph, making navigation easier, especially for larger flows. You can customize the appearance of nodes in the minimap by providing a nodeColor function.






Controls
React Flow comes with a set of customizable Controls for the viewport. You can zoom in and out, fit the viewport and toggle if the user can move, select and edit the nodes.






Background
The Background component adds a visual grid pattern to your flowgraph, helping users maintain orientation. You can choose from different pattern variants, or if you need more advanced customization, you can explore the source  code to implement your own pattern.






Panel
The Panel component allows you to add fixed overlays to your flowgraph, perfect for titles, controls, or any other UI elements that should remain stationary.






Advanced
For more advanced use cases and customization, we have even more built-in components you can check out in the API components overview
